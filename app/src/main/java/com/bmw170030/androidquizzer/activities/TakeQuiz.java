/**
 * TakeQuiz.java
 *
 * Written by Bradley Wersterfer for CS4301.001, Assignment 3, starting March 9, 2021.
 * Originally written by Bradley Wersterfer for CS4301.001, Assignment 2, starting January 23, 2021.
 * NetID: bmw170030
 *
 * This is the second main activity of the AndroidQuizzer application. It provides the utility for
 * actually taking a MultipleChoiceQuiz after they have been generated by the initial MainActivity.
 * It does this by populating a series of 5 TextViews with the question text and then the 4 answers
 * for that question (note that the MultipleChoiceQuiz object assumes that the quizzes will have a
 * very specific format of 4 choices and 1 correct answer). The user can click on any of the questions,
 * which will highlight that response. Once they are content with their choice, they can click on the
 * Confirm Answer button, which is held in a dynamic fragment. This can then be swapped out with a
 * replacement TextView to show the result of their guess--clicking on that TextView moves on to the
 * next question of this quiz, or to the results screen instead if all questions have been answered.
 */

package com.bmw170030.androidquizzer.activities;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.TextView;

import com.bmw170030.androidquizzer.fragments.FragConfirm;
import com.bmw170030.androidquizzer.fragments.FragCorrectness;
import com.bmw170030.androidquizzer.R;
import com.bmw170030.androidquizzer.quiz.MultipleChoiceQuiz;
import com.bmw170030.androidquizzer.quiz.Question;

public class TakeQuiz extends AppCompatActivity {

    private static final int NUM_QUESTIONS = 4;

    // Instance variables for each of the XML elements
    TextView question;
    TextView answer1;
    TextView answer2;
    TextView answer3;
    TextView answer4;
    boolean noFrag = true;

    // Passed in from the Intent that started this Activity
    MultipleChoiceQuiz quiz;
    String username;            // The user's entered name
    int choice = -1;            // Current Answer Choice

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_take_quiz);

        // Attach the views at runtime
        question = (TextView) findViewById(R.id.question);
        answer1 = (TextView) findViewById(R.id.answer1);
        answer2 = (TextView) findViewById(R.id.answer2);
        answer3 = (TextView) findViewById(R.id.answer3);
        answer4 = (TextView) findViewById(R.id.answer4);

        // Populates the chosen quiz and username from the past activity
        Intent intent = getIntent();
        username = intent.getStringExtra("Username");
        if(username == null)
            username = getString(R.string.default_name);
        quiz = (MultipleChoiceQuiz) intent.getSerializableExtra("Quiz");
        setDisplayToQuestion(quiz.getQuestion(0));
        setFragConfirm();
    }

    /**
     * Updates the display for the TakeQuiz activity to match the given question.
     * @param q The question object to answer next.
     */
    public void setDisplayToQuestion(Question q)
    {
        // If a null pointer is passed, then the quiz is over. Do not display a new question
        if(q != null)
        {
            // Display all of the text for the given question
            question.setText(q.getText());
            answer1.setText(q.getAnswer(0).getFullText());
            answer2.setText(q.getAnswer(1).getFullText());
            answer3.setText(q.getAnswer(2).getFullText());
            answer4.setText(q.getAnswer(3).getFullText());
        }
    }

    /**
     * Updates the background color of each answer choice to be white, resetting the answer display.
     */
    public void resetQuestionDisplay()
    {
        answer1.setBackgroundColor(getColor(R.color.white));
        answer2.setBackgroundColor(getColor(R.color.white));
        answer3.setBackgroundColor(getColor(R.color.white));
        answer4.setBackgroundColor(getColor(R.color.white));
    }

    /**
     * Click listener for when an answer choice is pressed. It finds the index of the chosen answer.
     * @param view The EditText Answer that was clicked.
     */
    public void answerClick(View view)
    {
        if(choice != -1)
            resetQuestionDisplay();

        TextView text = (TextView) view;
        text.setBackgroundColor(getColor(R.color.teal_200));
        choice = (text.getText().charAt(0) - 'A');
    }

    /**
     * This method locks in the currently selected answer and advances the quiz. Is only called by
     * the Confirmation Fragment's onConfirmClick method, so that fragment must be active for this
     * question to end.
     */
    public void confirmAnswer()
    {
        // Make the guess and update the display. Quiz object will handle updating score and incrementing
        // the question count. Reset display in between update to be safe.
        if(choice != -1) {
            int right_answer = quiz.getCurrentQuestion().getRightAnswer();
            boolean was_correct = quiz.guess(choice);
            setFragCorrectness(was_correct, right_answer);
        }
    }

    /**
     * This is the onClick event for when a correctness display text is pressed. It either brings up
     * the next question if there is one, or begins the next activity. It is only called by the onClick
     * listener from within the Correctness Fragment.
     */
    public void nextQuestion()
    {
        // Check to see if the next activity should begin.
        // Happens when there are no more questions.
        if(quiz.getCurrentQuestion() == null) {
            Intent intent = new Intent(this, DisplayResults.class);

            // Store statistics needed to display the results
            intent.putExtra("Username", username);
            intent.putExtra("Topic", quiz.getTopic());
            intent.putExtra("Score", quiz.getScore());
            intent.putExtra("Count", quiz.numQuestions());
            startActivity(intent);
        }
        // If the current question is not null, then instead clear the screen and display it.
        else {
            resetQuestionDisplay();
            setDisplayToQuestion(quiz.getCurrentQuestion());

            setFragConfirm();
            choice = -1;
        }
    }

    /**
     * Update the fragment in this scene with a confirmation button for definitively guessing the
     * currently selected answer for that question. This also removes any other fragment currently
     * in that one's place.
     */
    public void setFragConfirm()
    {
        //! If there is already the other fragment in place, remove it with the manager
        FragmentManager fragmentManager = getSupportFragmentManager();
        if(!noFrag) {
            FragCorrectness fragCorrect = (FragCorrectness) fragmentManager.findFragmentById(R.id.dynamic_fragment);
            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.remove(fragCorrect).commit();
        }

        // Put the Confirm Fragment in place
        FragConfirm fragConfirm = FragConfirm.newInstance();
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.add(R.id.dynamic_fragment, fragConfirm).addToBackStack(null).commit();

        // There is now a fragment displayed
        noFrag = false;
    }

    /**
     * Update the fragment in this scene with a display that will denote whether the user's answer
     * choice was correct or if they were wrong. If the latter, then the corresponding symbol of the
     * actual correct answer will also be displayed in this fragment. This also removes any other
     * fragment currently in that one's place.
     */
    public void setFragCorrectness(boolean is_correct, int right_answer)
    {
        // Determine the character associated with that answer
        char letter = (char)(right_answer + 'A');

        //! If there is already the other fragment in place, remove it with the manager
        FragmentManager fragmentManager = getSupportFragmentManager();
        if(!noFrag) {
            FragConfirm fragConfirm = (FragConfirm) fragmentManager.findFragmentById(R.id.dynamic_fragment);
            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.remove(fragConfirm).commit();
        }

        // Put the Correctness Fragment in place (also pass it the boolean truth value and letter
        // of the correct choice for display purposes)
        FragCorrectness fragCorrect = FragCorrectness.newInstance(is_correct, letter);
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.add(R.id.dynamic_fragment, fragCorrect).addToBackStack(null).commit();

        // There is now a fragment displayed
        noFrag = false;
    }
}